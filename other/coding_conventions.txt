=== Securix bash coding conventions

First of all I really appreciate any contribute to Securix via Github, but because all of us have slightly different conventions when coding in bash, please follow this template/guide.
In that case code will stay clear and readable after years

Make secure (beware of sprint attack), well readable (follow convention) code with focus on performance (use time command)

### Bash template
Bash scripts should contain this header

#!/bin/bash

#: title: Script title
#: file: /file/path
#: desc: Description of script function
#: author: First and Last name
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


One of the often used function is "f_msg" which colorize message based on its severity (info, warn, error), $1 is level $2 is text
Cron scripts shouldn't use f_msg because output is forwarded to log and not to screen
example: f_msg error "Cant find XXX" - will print "Cant find XXX" in red color

Shared functions are defined in file /usr/sbin/securix-functions be familiar with them so you donâ€™t need to reinvent-the-wheel

Always test your code in all possible situations (does file/directory exist? what if variable is empty? ...) before contributing.

### Variables
A variable name may be any sequence of characters not containing ":", "#", "=", "-", "%" or leading or trailing whitespace. Use only letters, numbers, and underscores to avoid further issues.
Variable names are case-sensitive.

Variables defined in /etc/securix/securix.conf starts with SX_* (SX_VARIABLE)

Text variable must be enclosed in double-quotation mark, even if it is one word
VARIABLE="string"

Integer value dont need to be enclosed
VARIABLE=123

Variable (string/integer) used inside quotation mark must be enclosed in curly braces
echo "My name is ${USERNAME}"

When you're executing command inside script do not use backquote (``), but brackets
VAR=$(echo ${OUTPUT} | awk '{ print $2 }')
or
echo $(date) >> $SECURIXLOG

### Arithmetic operations
SIZE=$((PARTITION + 1000))
or
echo $((a = 2 , b = 2 + a , a * b))
or
((count++))
or
fill=$((((columns - colnumber) * chars) - 1))

### IF
Here you have basic examples of test
Especially follow newlines, tabs and spaces.
All string variables should be enclosed in double-quotation marks
A newline is used after "then" and after "else"
BASH if statements: http://www.linuxtutorialblog.com/post/tutorial-conditions-in-bash-scripting-if-statements

# Compare integer values using one of "-eq, -ne, -lt, -le, -gt, -ge" meaning equal, not equal, less than, less than or equal, greater than, and greater than or equal.

if [ $EUID -ne 0 ]; then
    f_msg error "This script must be run as root or via sudo"
    exit 1
else
    f_msg info "You have root permissions"
fi

# Check if variable is null
if [ -z "$VARIABLE" ]; then
    f_msg info "Variable VARIABLE is null"
fi

# String variable must be enclosed by quotation marks
if [ "$VARIABLE" = "yes" ]; then
    f_msg info "Accepted"
fi

# Catch exit status
if [ $? -eq 0 ]; then
    echo "Command end without problem"
fi

# [[ is used only for string pattern match

if [[ "$VARIABLE" = "A*" ]]; then
    f_msg info "Variable start with \"A\""
fi

### Loops
for arguments in "$@"; do
    echo "${arguments}"
done

### Shell functions
Name of function start with f_* so anyone can recognize it quickly
Again please follow newlines, spaces, tabs, etc. convention

f_updatesecurix() {
    f_msg info "###-### Checking update of Securix scripts ---"
    f_download ${SECURIXUPDATE}/current
    LASTVERSION=$(<current)
    if [ $SECURIXVERSION -eq $LASTVERSION ]; then
        f_msg info "--- No updates available/needed"
    else
        f_msg info "--- New update available!"
    fi
}

### Case statement
We use mainly two forms
First one is optimized for readability
case "$HOSTTYPE" in
    x86_64)
        ARCH="amd64"
        ;;
    i386|i486|i586|i686)
        ARCH="x86"
        ;;
    *)
    	echo "ERROR: valid architecture not found - ${HOSTTYPE}"
    	exit 1
    	;;
esac

And short-form mainly used in shared functions
case "$answer" in
    y|Y|yes|YES|Yes) yesno="yes" ;;
    *) yesno="no" ;;
esac

### External commands
Try to avoid usage of external commands where it is not necessary (grep, awk, cut, cat, sed, ...).
Usally it is much faster to use built-in function, than executing external commands, especially if operation is performed upon variable (not file).


Examples:
We dont need to use "VARIABLE=$(cat /path/to/file)" when we want to set variable from file. Instead of this we can source file to variable directly.
VARIABLE=$(</path/to/file)

We would like to get lenght of longest line in one file via "wc -L $file", but it will produce output in format "$number $file"
Usually we will use something like this:
wc -L $file | awk '{ print $1 }'

But we can use parameter expansion to split value from filename.
LONGLINE=$(wc -L $file)
LONGLINE=${LONGLINE%% *} # longest match of the pattern " *" from the end of the string

Next example:
We would like to split path from file name, but without external commands like basename, dirname
FILE="/aaa/bbb/ccc.tgz"

FILEPATH=${FILE%/*} # will produce /aaa/bbb
FILENAME=${FILE##*/} # will produce ccc.tgz
FILEEXTENSION=${FILE##*.} # will produce tgz

# Case modification example
The "^" operator modifies the first character to uppercase, the "," operator to lowercase. When using the double-form (^^ and ,,) all characters are converted.
The (currently undocumented) operators "~" and "~~" reverse the case of the given text.

MYVAR="aaBBcc"

echo ${MYVAR^}  # AaBBcc
echo ${MYVAR^^} # AABBCC
echo ${MYVAR,,} # aabbcc
echo ${MYVAR~~} # AAbbCC

# Search and replace example (instead of usign SED)
MYVAR="abc 123 abc 456"

# one slash is to only substitute the first occurrence
echo ${MYVAR/abc/klm} # will produce: klm 123 abc 456

# two slashes is to substitute all occurrences
echo ${MYVAR//abc/klm} # will produce: klm 123 klm 456

To understand it well, please read this: http://wiki.bash-hackers.org/syntax/pe

Other information please find on this great page
http://wiki.bash-hackers.org
